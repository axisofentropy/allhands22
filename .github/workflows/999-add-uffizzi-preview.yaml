---
name: 999 Deploy or Update Uffizzi Preview

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest

    permissions:
      packages: write # needed to push docker image to ghcr.io

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push to GHCR
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/allhands22:${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
    
  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read
      
    steps:
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Unit Testing in Docker
        run: docker run --rm ghcr.io/${{ github.repository_owner }}/allhands22:"$GITHUB_RUN_ID" echo "run test commands here"

  test-integration:
    name: Integration tests in Compose
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test healthcheck in Docker Compose
        run: |
          export TESTING_IMAGE=ghcr.io/${{ github.repository_owner }}/allhands22:"$GITHUB_RUN_ID"
          echo Testing image: "$TESTING_IMAGE"
          docker compose -f docker-compose.test.yml up --exit-code-from sut

  test-k3d:
    name: Test Deployment in Kubernetes
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      
      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TESTING_IMAGE=ghcr.io/${{ github.repository_owner }}/allhands22:"$GITHUB_RUN_ID"
          envsubst < manifests/deployment.yaml  | kubectl apply -f -
          kubectl rollout status deployment myapp
          kubectl exec deploy/myapp -- curl --fail localhost

  scan-image:
    name: Scan Image with Trivy
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      contents: read # for actions/checkout to fetch code
      packages: read # needed to pull docker image to ghcr.io
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/${{ github.repository_owner }}/allhands22:"$GITHUB_RUN_ID"
        
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/allhands22:${{ github.run_id }}
          format: table
          exit-code: 0

      # NOTE: disabled to avoid running twice and overwriting 07-add-cve-scanning-adv.yaml
      # - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ghcr.io/${{ github.repository_owner }}/allhands22:${{ github.run_id }}
      #     exit-code: 1
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'HIGH,CRITICAL'
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v1
      #   if: always()
      #   with:
      #     sarif_file: 'trivy-results.sarif'

  build-final-image:
    name: Build Final Image
    needs: [test-unit, test-integration, test-k3d, scan-image]
    runs-on: ubuntu-latest
#NEW: (START) ##########################################################
    outputs:
      tags: ${{ steps.output-tags.outputs.tags }}
#NEW: (END) ############################################################

    permissions:
      packages: write # needed to push docker image to ghcr.io
      pull-requests: write # needed to create and update comments in PRs

    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata for Final Image Build
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: uffizzi/allhands22,ghcr.io/${{ github.repository_owner }}/allhands22
          flavor: |
            latest=false
          tags: |
            type=raw,value=999
          # comment these out on all but 04-add-metadata.yaml to avoid overwriting image tags
          # type=raw,value=99
          # type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
          # type=ref,event=pr
          # type=ref,event=branch
          # type=semver,pattern={{version}}
      
      - name: Docker Build and Push to GHCR and Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64,linux/arm/v7

        # If PR, put image tags in the PR comments
        # from https://github.com/marketplace/actions/create-or-update-comment
        # These are commented out to avoid conflicting with 05-add-comments.yaml example
      # - name: Find comment for image tags
      #   uses: peter-evans/find-comment@v1
      #   if: github.event_name == 'pull_request'
      #   id: fc
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     comment-author: 'github-actions[bot]'
      #     body-includes: Docker image tag(s) pushed
      
      #   # If PR, put image tags in the PR comments
      # - name: Create or update comment for image tags
      #   uses: peter-evans/create-or-update-comment@v1
      #   if: github.event_name == 'pull_request'
      #   with:
      #     comment-id: ${{ steps.fc.outputs.comment-id }}
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       Docker image tag(s) pushed:
      #       ```text
      #       ${{ steps.docker_meta.outputs.tags }}
      #       ```

      #       Labels added to images:
      #       ```text
      #       ${{ steps.docker_meta.outputs.labels }}
      #       ```
      #     edit-mode: replace

#NEW: (START) ##########################################################
      - name: Output first image tag
        id: output-tags
        run: |
          echo "::set-output name=tags::${{ steps.docker_meta.outputs.tags }}"

  deploy-uffizzi-preview:
    name: Deploy Uffizzi Preview
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    needs: [build-final-image]
    steps:
      - name: Login to DockerHub
        # DockerHub Login not required if image repository is public.
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          # Cut all but the first image tag.
          FINAL_IMAGE=$(echo ${{ needs.build-final-image.outputs.tags }} | cut -f1 -d',')
          export FINAL_IMAGE
          echo Final image: "$FINAL_IMAGE"
          # Render simple template from environment variables.
          mkdir tmp
          envsubst < docker-compose.uffizzi.yaml > tmp/docker-compose.generated.yaml
      - name: Deploy preview
        id: preview
        uses: UffizziCloud/preview-action@latest
        with:
          compose-file: 'tmp/docker-compose.generated.yaml'
          username: adam.vollrath@uffizzi.com
          server: https://devopseu.uffizzicloud.com
          project: default
          password: ${{ secrets.UFFIZZI_PASSWORD }}
      - name: Check outputs
        # TODO: Drop this step soon.
        run: echo "Deployed ${{ steps.preview.outputs.id }} at ${{ steps.preview.outputs.url }}"

        # If PR, put Preview URL and ID in the PR comments
        # from https://github.com/marketplace/actions/create-or-update-comment
      - name: Confirm Successful Preview Deployment
        uses: docker://curlimages/curl:7.82.0
        with:
          args: --retry 12 --retry-all-errors --retry-delay 0 --fail --location ${{ steps.preview.outputs.url }}
      - name: Find comment for deployment URL
        uses: peter-evans/find-comment@v1
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Uffizzi Preview deployed

        # If PR, put image tags in the PR comments
      - name: Create or update comment for deployment URL
        uses: peter-evans/create-or-update-comment@v1
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Uffizzi Preview deployed:
            ${{ steps.preview.outputs.url }}

            Uffizzi Preview ID: `${{ steps.preview.outputs.id }}`
          edit-mode: replace

  update-preview:
    name: Update Uffizzi Preview
    if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
    needs: [build-final-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          # Cut all but the first image tag.
          FINAL_IMAGE=$(echo ${{ needs.build-final-image.outputs.tags }} | cut -f1 -d',')
          export FINAL_IMAGE
          echo Final image: "$FINAL_IMAGE"
          # Render simple template from environment variables.
          mkdir tmp
          envsubst < docker-compose.uffizzi.yaml > tmp/docker-compose.generated.yaml
      - name: Find comment for deployment URL
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Preview
      - name: Output deployment ID
        id: comment
        run: 'echo ''${{ steps.find-comment.outputs.comment-body }}'' | sed -n "s/Uffizzi Preview ID: \`\(\S*\)\`/::set-output name=id::\1/p"'
      - name: DEBUG - Echo deployment ID
        run: 'echo ${{ steps.comment.outputs.id }}'
      - name: Update Preview from Uffizzi
        uses: UffizziCloud/update-preview-action@v1
        id: preview
        if: ${{ steps.comment.outputs.id != null }}
        with:
          preview-id: ${{ steps.comment.outputs.id }}
          compose-file: 'tmp/docker-compose.generated.yml'
          username: adam.vollrath@uffizzi.com
          server: https://devopseu.uffizzicloud.com
          project: default
          password: ${{ secrets.UFFIZZI_PASSWORD }}
      - name: Check outputs
        run: echo "${{ steps.preview.outputs.id }} at ${{ steps.preview.outputs.url }}"
      - name: Confirm Successful Preview Deployment
        uses: docker://curlimages/curl:7.82.0
        with:
          args: --retry 12 --retry-all-errors --retry-delay 0 --fail --location ${{ steps.preview.outputs.url }}
#NEW: (END) ############################################################
